{
  "swagger": "2.0",
  "info": {
    "description": "First version of Evendate API. Just take it and use.",
    "version": "1.0.0",
    "title": "Evendate API",
    "contact": {
      "email": "api@evendate.ru"
    }
  },
  "host": "test.evendate.org",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Organization",
      "description": "Everything about organizations and subscriptions"
    },
    {
      "name": "Event",
      "description": "All about events in organizations"
    },
    {
      "name": "User",
      "description": "Current user and friends"
    },
    {
      "name": "Date",
      "description": "Events dates"
    },
    {
      "name": "Tag",
      "description": "Events tags"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/organizations/": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get list of organizations",
        "description": "",
        "operationId": "getOrganizations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "short_name",
            "in": "query",
            "description": "Short name pattern of organizations to search. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name pattern of organizations to search. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description pattern of organizations to search. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "type_id",
            "in": "query",
            "description": "ID of organization type.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "strict",
            "in": "query",
            "description": "Changes `name`, `short_name` and `description` search patterns to strict (without %)",
            "required": false,
            "type": "string",
            "enum": ["true", "false"]
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          }
        }
      }
    },
    "/organizations/{Id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Find organization by ID",
        "description": "Returns a single organization",
        "operationId": "getOrganizationById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "ID of organization to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          }
        }
      }
    },
    "/organizations/subscriptions": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Add a new subscription to organization",
        "description": "",
        "operationId": "addSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "ID of organization user wants to subscribe",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "BadArgumentException"
          }
        }
      },
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get list of subscribed organizations",
        "description": "",
        "operationId": "getSubscriptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          }
        }
      }
    },
    "/organizations/{Id}/subscriptions": {
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove subscription to organization",
        "description": "",
        "operationId": "deleteSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "ID of organization user wants to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "BadArgumentException"
          }
        }
      }
    },


    "/tags/": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Get list of tags",
        "description": "",
        "operationId": "getTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name pattern of tags to search. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "event_id",
            "in": "query",
            "description": "Event ID to search for",
            "required": false,
            "type": "string"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        }
      }
    },
    "/tags/{Id}": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Get tag by ID",
        "description": "",
        "operationId": "getTag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "ID of tag",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        }
      }
    },

    "/events/": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Create new event",
        "description": "",
        "operationId": "addEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "new event data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get events list",
        "description": "",
        "operationId": "getEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "description": "events in one day",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "future",
            "description": "all future events",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "since",
            "description": "events since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "changed_since",
            "description": "events changed or added since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Events with this tags",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "since",
            "description": "events till date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "title",
            "description": "events title pattern. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "strict",
            "description": "Changes `title` and `description` search patterns to strict (without %)",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }

            }
          }
        }
      }
    },
    "/events/my": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get events feed for current user",
        "description": "",
        "operationId": "getMyEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "description": "events in one day",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "future",
            "description": "all future events",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "since",
            "description": "events since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "changed_since",
            "description": "events changed or added since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Events with this tags",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "since",
            "description": "events till date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "title",
            "description": "events title pattern. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "strict",
            "description": "Changes `title` and `description` search patterns to strict (without %)",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items":{
                "$ref": "#/definitions/Event"
              }
            }
          }
        }
      }
    },
    "/events/dates": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get events dates collection",
        "description": "",
        "operationId": "getEventsDates",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "description": "Get all dates in one month. Format: YYYY-MM",
            "required": false,
            "type": "string"
          },
          {
            "name": "since",
            "in": "query",
            "description": "Filter all dates since date.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "till",
            "in": "query",
            "description": "Filter all dates till date.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "event_id",
            "in": "query",
            "description": "Returns all dates for one event.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "unique",
            "in": "query",
            "description": "[WARN!] Changes behavior. If equals TRUE dates can contain two additional fields: `events_count` and `favorites_count` otherwise can't. Main use case: filter by month and set to true to get all days in month with events and favorites.",
            "required": false,
            "type": "string",
            "enum": ["true", "false"]
          },
          {
            "name": "organization_id",
            "in": "query",
            "description": "Returns all dates for one organization.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/favorites": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get all actual (not past) favorite events",
        "description": "",
        "operationId": "getFavoriteEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "description": "events in one day",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "future",
            "description": "all future events",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "since",
            "description": "events since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "changed_since",
            "description": "events changed or added since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Events with this tags",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "since",
            "description": "events till date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "title",
            "description": "events title pattern. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "strict",
            "description": "Changes `title` and `description` search patterns to strict (without %)",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get information about one event with specified ID",
        "description": "",
        "operationId": "getEvent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Change event",
        "description": "",
        "operationId": "updateEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "new event data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}/status": {
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Changes status for event (shown or hidden)",
        "description": "",
        "operationId": "setEventStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hidden",
            "in": "query",
            "description": "Additional data to pass to server",
            "required": true,
            "type": "string",
            "enum": [
              "true", "false"
            ]
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}/notifications": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get all notifications for event[doing]",
        "description": "",
        "operationId": "getEventNotifications",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Notification"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Create new notification for event",
        "description": "",
        "operationId": "addNotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "notification_time",
            "in": "query",
            "description": "Datetime for new notification",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}/notifications/{UUID}": {
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Update one specified user notification for event",
        "description": "",
        "operationId": "updateNotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "notification_time",
            "in": "query",
            "description": "New notification time",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "Notification UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Remove (mute) one specified user notification for event",
        "description": "",
        "operationId": "deleteNotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "Notification UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}/favorites": {
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Delete event from favorites",
        "description": "",
        "operationId": "removeFavoriteEvent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Make event favorite",
        "description": "",
        "operationId": "makeEventFavorite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "ID of event for making favorite",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },

    "/users/feed": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns friends' list of actions (feed)",
        "description": "",
        "operationId": "getFriendsFeed",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "type": "array",
            "items": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/users/friends/": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns list of friends for current user",
        "description": "",
        "operationId": "getFriends",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "type": "array",
            "items": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/users/{Id}/": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns list of actions for one specified friend",
        "description": "",
        "operationId": "getFriendActions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Friends ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "type": "array",
            "items": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns information about current user",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/users/me/devices": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates user token and set's device type for token",
        "description": "",
        "operationId": "updateDevice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "device_token",
            "in": "query",
            "description": "Device ID (socket id or push server id)",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_type",
            "in": "query",
            "description": "Type of client token is assigned",
            "required": true,
            "type": "string",
            "enum": ["browser", "ios", "android"]
          },
          {
            "name": "device_name",
            "in": "query",
            "description": "Name for device (currently not showing to user)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get list of user's devices",
        "description": "",
        "operationId": "getUserDevices",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Device"
            }
          }
        }
      }
    },
    "/users/me/settings": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user settings for web version",
        "description": "",
        "operationId": "updateUserSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "notify-in-browser",
            "description": "If true enables notifications in browser",
            "required": true,
            "type": "string",
            "enum": ["true", "false"]
          },
          {
            "in": "query",
            "name": "show-to-friends",
            "description": "If true enables friends to see subscriptions and actions in their feed",
            "required": true,
            "type": "string",
            "enum": ["true", "false"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },


  "definitions": {
    "Organization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "short_name": {
          "type": "string"
        },
        "type_id": {
          "type": "integer",
          "format": "int32"
        },
        "img_url": {
          "type": "string"
        },
        "background_img_url": {
          "type": "string"
        },
        "type_name": {
          "type": "string"
        },
        "organization_type_id": {
          "type": "integer",
          "format": "int32"
        },
        "organization_type_order": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "boolean",
          "default": true
        },
        "[description]": {
          "type": "string"
        },
        "[background_medium_img_url]": {
          "type": "string"
        },
        "[background_small_img_url]": {
          "type": "string"
        },
        "[img_medium_url]": {
          "type": "string"
        },
        "[img_small_url]": {
          "type": "string"
        },
        "[site_url]": {
          "type": "string"
        },
        "[subscribed_count]": {
          "type": "integer",
          "format": "int32"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int32"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int32"
        },
        "[is_subscribed]": {
          "type": "boolean"
        },
        "[subscription_id]": {
          "type": "integer",
          "format": "int32"
        },
        "[new_events_count]": {
          "type": "integer",
          "format": "int32"
        },
        "[events]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "[subscribed]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "middle_name": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "enum": [
            "male",
            "female"
          ]
        },
        "avatar_url": {
          "type": "string"
        },
        "[type]": {
          "type": "string",
          "enum": [
            "facebook",
            "vk",
            "google"
          ]
        },
        "[is_friend]": {
          "type": "boolean"
        },
        "[blurred_image_url]": {
          "type": "string"
        },
        "[link]": {
          "type": "string"
        },
        "[actions]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Action"
          }
        },
        "[subscriptions]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Organization"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "integer",
          "format": "int64"
        },
        "updated_at": {
          "type": "integer",
          "format": "int64"
        },
        "events_count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Notification": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "integer",
          "format": "int64"
        },
        "event_id": {
          "type": "integer",
          "format": "int64"
        },
        "notification_time": {
          "type": "integer",
          "format": "int64"
        },
        "[sent_time]": {
          "type": "integer",
          "format": "int64"
        },
        "[notification_type]": {
          "type": "string"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "boolean"
        },
        "text": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "response_id": {
          "type": "string"
        },
        "request_time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EventDate": {
      "type": "object",
      "properties": {
        "event_date": {
          "type": "string"
        },
        "[id]": {
          "type": "integer",
          "format": "int64"
        },
        "[start_time]": {
          "type": "string"
        },
        "[end_time]": {
          "type": "string"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[event_id]": {
          "type": "integer",
          "format": "int64"
        },
        "[organization_id]": {
          "type": "integer",
          "format": "int64"
        },
        "[events_count]": {
          "type": "integer",
          "format": "int64"
        },
        "[favored_count]": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "required": true
        },
        "title": {
          "type": "string"
        },
        "first_event_date": {
          "type": "integer",
          "format": "int64"
        },
        "last_event_date": {
          "type": "integer",
          "format": "int64"
        },
        "nearest_event_date": {
          "type": "integer",
          "format": "int64"
        },
        "image_vertical_url": {
          "type": "string"
        },
        "image_horizontal_url": {
          "type": "string"
        },
        "organization_id": {
          "type": "integer",
          "format": "int64"
        },
        "[creator_id]": {
          "type": "integer",
          "format": "int64"
        },
        "[latitude]": {
          "type": "number",
          "format": "float"
        },
        "[longitude]": {
          "type": "number",
          "format": "float"
        },
        "[organization_name]": {
          "type": "string"
        },
        "[organization_type_name]": {
          "type": "string"
        },
        "[organization_short_name]": {
          "type": "string"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[favored_users_count]": {
          "type": "integer",
          "format": "int64"
        },
        "[description]": {
          "type": "string"
        },
        "[location]": {
          "type": "string"
        },
        "[detail_info_url]": {
          "type": "string"
        },
        "[is_favorite]": {
          "type": "boolean"
        },
        "[tags]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "[notifications]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "[dates]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventDate"
          }
        },
        "[favored]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "[can_edit]": {
          "type": "boolean"
        }
      }
    },
    "NewEvent": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "organization_id": {
          "type": "integer",
          "format": "int64"
        },
        "location_object": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "number",
              "format": "float"
            },
            "longitude": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "longitude": {
          "type": "number",
          "format": "float"
        },
        "latitude": {
          "type": "number",
          "format": "float"
        },
        "image_vertical": {
          "type": "string",
          "format": "byte"
        },
        "image_horizontal": {
          "type": "string",
          "format": "byte"
        },
        "detail_info_url": {
          "type": "string"
        },
        "dates": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "event_date": {
                "type": "string",
                "format": "date"
              },
              "start_time": {
                "type": "string"
              },
              "end_time":{
                "type": "string"
              }
            }
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Action": {
      "type": "object",
      "properties": {

      }
    },
    "Device": {
      "type": "object",
      "properties": {
        "device_token": {
          "type": "string"
        },
        "client_type": {
          "type": "string"
        },
        "[device_name]": {
          "type": "string"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[expires_on]": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about authorization flow, API requests and responses",
    "url": "https://github.com/KardanovIR/evendate-docs/wiki/API"
  }
}
